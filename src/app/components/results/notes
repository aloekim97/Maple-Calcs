return (
    <>
      <div className="flex flex-col justify-between items-center w-full p-[12px]">
        {/* Starforce Section */}
        {shouldShowStars() ? (
          <div className="grid grid-cols-3 w-full gap-[8px]">
            {renderStars()}
          </div>
        ) : (
          <div className="grid grid-cols-3 w-full gap-[8px]"></div>
        )}

        {/* Item Image */}
        <Image
          src={selectedGear.url}
          width={184}
          height={184}
          alt={itemName}
          className="p-[4px]"
          onError={(e) => {
            const target = e.target as HTMLImageElement;
            target.src = '/image/items/fallback.png';
          }}
        />

        {/* Stats Section */}
        <div className="flex w-full">
          {/* Potential Stats */}
          {!NON_CUBE_TYPES.has(selectedGear?.['Item Name'] ?? '') &&
          !(
            lineData?.statValue?.line1 === 1 &&
            lineData?.statValue?.line2 === 1 &&
            lineData?.statValue?.line3 === 1
          ) ? (
            <div className="flex flex-col gap-[4px] w-full mr-[16px]">
              <h5 className="opacity-60 text-[#00B188]">Potential:</h5>
              {Object.entries(lineData?.itemStat ?? {}).map(
                ([lineKey, statName]) => (
                  <div key={lineKey} className="flex justify-between w-full">
                    <h5 className="text-[#00B188]">
                      {statName?.toString().toUpperCase()}:
                    </h5>
                    <h6 className="text-[#00B188]">
                      +{lineData?.statValue?.[lineKey] ?? 0}%
                    </h6>
                  </div>
                )
              )}
            </div>
          ) : null}

          {/* Set Stats */}
          <div className="w-full">
            {setStats ? (
              <div className="flex flex-col gap-[4px]">
                <div className="flex gap-[4px] items-center">
                  {setStats.Set && (
                    <h5 className="opacity-60 border-white border">
                      {setStats.Set}
                    </h5>
                  )}
                  {setStats['Set Count'] && (
                    <h5 className="opacity-60 bg-gray-200 rounded-full border border-gray-400 px-[2px]">
                      {setStats['Set Count']}
                    </h5>
                  )}
                </div>

                {Object.entries(setStats)
                  .filter(
                    ([key, value]) =>
                      !['Set', 'Set Count'].includes(key) && value
                  )
                  .map(([key, value]) => (
                    <div key={key} className="flex justify-between w-full">
                      <h5>
                        {key === 'Boss Damage' ? 'Boss' : key.replace('&', '/')}
                        :
                      </h5>
                      <h6>+{value}</h6>
                    </div>
                  ))}
              </div>
            ) : (
              <div className="flex flex-col w-full gap-[4px]">
                <h5 className="opacity-60">Set</h5>
                <h5 className="opacity-80">
                  {`Input a valid value for "Set Number" to see the respective set bonuses.`}
                </h5>
              </div>
            )}
          </div>
        </div>
      </div>

      <div className="flex flex-col justify-start items-start w-full p-[12px] gap-[8px]">
        <h3 className="flex w-full justify-start leading-[24px]">{itemName}</h3>

        <div className="flex flex-col w-full gap-[6px]">
          {[
            { label: 'Type:', value: selectedGear['Sub-Type'] },
            { label: 'Lvl:', value: selectedGear.Level },
            { label: 'Set:', value: selectedGear.Set || 'none' },
            {
              label: 'Main Stat:',
              value: sfResults
                ? renderStatWithBonus(mainStatValue, sfResults.difference.stat)
                : `${mainStatValue || 0}`,
            },
            {
              label: 'Sub Stat:',
              value: sfResults
                ? renderStatWithBonus(subStatValue, sfResults.difference.stat)
                : `${subStatValue || 0}`,
            },
            { label: 'HP:', value: selectedGear.HP || 0 },
            { label: 'MP:', value: selectedGear.MP || 0 },
            {
              label: 'Atk:',
              value: sfResults
                ? renderStatWithBonus(atkValue, sfResults.difference.att)
                : `${toNumber(atkValue)}`,
            },
            {
              label: 'M.Atk:',
              value: sfResults
                ? renderStatWithBonus(atkValue, sfResults.difference.att)
                : `${toNumber(atkValue)}`,
            },
            { label: 'IED:', value: selectedGear.IED || 0 },
            { label: 'Boss Damage:', value: selectedGear['Boss Damage'] || 0 },
            { label: 'Damage:', value: selectedGear.Damage || 0 },
          ].map((item, index) => (
            <div key={index} className="flex justify-between w-full">
              <h4>{item.label}</h4>
              <p>{item.value}</p>
            </div>
          ))}
        </div>
      </div>
    </>
  );
}
